source("~/CB2-101-2023-assignment/Final Assignment answer 2_New_Asef.R")
#Answer - 2
r <- readLines("https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/variants/humsavar.txt",skipNul = T)
begin <- grep("^____", r, perl = T)
end <- grep("^---", r, perl = T)
end <- end[4]
r_data <- r[(begin+1):(end-2)]
d <- read.table(textConnection(r_data), fill = T, stringsAsFactors = F, sep="", flush = T)
d<- d[, -ncol(d)]
write.table(d, "humsavar.tsv", row.names = F, col.names = F, quote = F, sep="\t")
#-1
filtered_data <- subset(d, V5 != "LB/B")
Gene_counts <- table(filtered_data$V1)
sorted_Gene_counts <- sort(Gene_counts, decreasing = TRUE)
top_5_categories <- head(sorted_Gene_counts, 5)
top_5_categories
#-2
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(filtered_data, aes(y = V1)) +
geom_bar(fill = "skyblue", color = "black") +
theme(axis.text.x = element_text(angle = 45, vjust = 1)) +
labs(title = "Frequency Distribution of Disease Variants Across Genes", x = "Frequency", y = "Genes")
#-3
average_mutations <- mean(Gene_counts)
ggplot(filtered_data, aes(y = V1)) +
geom_bar(fill = "skyblue", color = "black") +
theme(axis.text.x = element_text(angle = 45, vjust = 1)) +
labs(title = "Frequency Distribution of Disease Variants Across Genes", x = "Frequency", y = "Genes") +
geom_vline(xintercept = average_mutations, color = "red", linetype = "dashed")
#-4
mutations <- filtered_data$V4
affected_aa <- gsub(".*p\\.([A-Z][a-z]{2})(\\d+)[A-Z][a-z]{2}.*", "\\1", mutations)
aa_counts <- table(affected_aa)
aa_freq <- aa_counts / sum(aa_counts)
aa_freq <- aa_freq[order(names(aa_freq))]
amino_acids <- names(aa_freq)
barplot(aa_freq, col = "gray",
main = "Fraction of Mutations Affecting Each Amino Acid",
xlab = "Amino Acid", ylab = "Fraction",
names.arg = amino_acids,
las = 2, cex.names = 0.8)
install.packages("data.table")
library(data.table)
file_path <- "/home/cb2user/Downloads/Final assignment/Homo_sapiens.gene_info/Homo_sapiens.gene_info"
install.packages("ggplot2")
library(ggplot2)
#a
file_path <- "/home/cb2user/Downloads/Final assignment/Homo_sapiens.gene_info"
gene_info <- read.delim(file_path)
gene_info_subset <- gene_info[, c("Symbol", "chromosome")]
head(gene_info_subset)
gene_info_clean <- gene_info_subset[!grepl("\\|", gene_info_subset$chromosome), ]
gene_info_clean$chromosome <- factor(gene_info_clean$chromosome,
levels = c(as.character(1:22), "X", "Y"))
chromosome_counts <- table(gene_info_clean$chromosome)
chromosome_data <- data.frame(Chromosome = names(chromosome_counts),
Gene_Count = as.numeric(chromosome_counts))
ggplot(chromosome_data, aes(x = Chromosome, y = Gene_Count)) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Chromosomes", y = "Gene Count", title = "Number of genes in each chromosome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#b
new_values <- c(
248956422, 242193529, 198295559, 190214555, 181538259, 170805979, 159345973, 145138636,138394717, 133797422,
135086622, 133275309, 114364328, 107043718, 101991189, 90338345, 83257441, 80373285, 58617616, 64444167, 46709983, 50818468, 156040895,
57227415)
chromosome_data$Length_C <- new_values
chromosome_data
model <- lm(Gene_Count ~ Length_C,  data = chromosome_data)
summary(model)
correlation <- cor(chromosome_data$Gene_Count, chromosome_data$Length_C)
correlation
ggplot(chromosome_data, aes(x = as.numeric(gsub(",", "", Length_C)), y = Gene_Count)) +
geom_point() +  # Scatter plot of the data points
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Fitted regression line
labs(x = "Length of Chromosome", y = "Gene Count", title = "Fitted Regression Line") +
theme_minimal()
fitted_values <- predict(model, newdata = chromosome_data)
fitted_values
ggplot(chromosome_data, aes(x=Length_C, y=Gene_Count)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')+labs(x = "Length of Chromosome", y = "Gene Count", title = "Fitted Regression Line")
#c
get_chromosome <- function(data, type = "highest") {
if (type == "highest") {
return(data$Chromosome[which.max(data$Gene_Count)])
} else if (type == "lowest") {
return(data$Chromosome[which.min(data$Gene_Count)])
} else {
stop("Invalid type argument. Please use 'highest' or 'lowest'.")
}
}
highest_count_chromosome <- get_chromosome(chromosome_data, "highest")
lowest_count_chromosome <- get_chromosome(chromosome_data, "lowest")
cat("Chromosome with the highest count:", highest_count_chromosome, "\n")
cat("Chromosome with the lowest count:", lowest_count_chromosome, "\n")
#a
file_path <- "/home/cb2user/Downloads/Final assignment/Homo_sapiens.gene_info"
install.packages("data.table")
library(data.table)
file_path <- "/home/cb2user/Downloads/Final assignment/Homo_sapiens.gene_info/Homo_sapiens.gene_info"
install.packages("ggplot2")
library(ggplot2)
#a
file_path <- "/home/cb2user/Downloads/Final assignment/Homo_sapiens.gene_info"
gene_info <- read.delim(file_path)
gene_info_subset <- gene_info[, c("Symbol", "chromosome")]
head(gene_info_subset)
gene_info_clean <- gene_info_subset[!grepl("\\|", gene_info_subset$chromosome), ]
gene_info_clean$chromosome <- factor(gene_info_clean$chromosome,
levels = c(as.character(1:22), "X", "Y"))
chromosome_counts <- table(gene_info_clean$chromosome)
chromosome_data <- data.frame(Chromosome = names(chromosome_counts),
Gene_Count = as.numeric(chromosome_counts))
ggplot(chromosome_data, aes(x = Chromosome, y = Gene_Count)) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Chromosomes", y = "Gene Count", title = "Number of genes in each chromosome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#b
new_values <- c(
248956422, 242193529, 198295559, 190214555, 181538259, 170805979, 159345973, 145138636,138394717, 133797422,
135086622, 133275309, 114364328, 107043718, 101991189, 90338345, 83257441, 80373285, 58617616, 64444167, 46709983, 50818468, 156040895,
57227415)
chromosome_data$Length_C <- new_values
chromosome_data
model <- lm(Gene_Count ~ Length_C,  data = chromosome_data)
summary(model)
correlation <- cor(chromosome_data$Gene_Count, chromosome_data$Length_C)
correlation
ggplot(chromosome_data, aes(x = as.numeric(gsub(",", "", Length_C)), y = Gene_Count)) +
geom_point() +  # Scatter plot of the data points
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Fitted regression line
labs(x = "Length of Chromosome", y = "Gene Count", title = "Fitted Regression Line") +
theme_minimal()
#b
new_values <- c(
248956422, 242193529, 198295559, 190214555, 181538259, 170805979, 159345973, 145138636,138394717, 133797422,
135086622, 133275309, 114364328, 107043718, 101991189, 90338345, 83257441, 80373285, 58617616, 64444167, 46709983, 50818468, 156040895,
57227415)
chromosome_data$Length_C <- new_values
chromosome_data
model <- lm(Gene_Count ~ Length_C,  data = chromosome_data)
summary(model)
correlation <- cor(chromosome_data$Gene_Count, chromosome_data$Length_C)
correlation
ggplot(chromosome_data, aes(x = as.numeric(gsub(",", "", Length_C)), y = Gene_Count)) +
geom_point() +  # Scatter plot of the data points
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Fitted regression line
labs(x = "Length of Chromosome", y = "Gene Count", title = "Fitted Regression Line") +
theme_minimal()
fitted_values <- predict(model, newdata = chromosome_data)
fitted_values
ggplot(chromosome_data, aes(x=Length_C, y=Gene_Count)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')+labs(x = "Length of Chromosome", y = "Gene Count", title = "Fitted Regression Line")
#c
get_chromosome <- function(data, type = "highest") {
if (type == "highest") {
return(data$Chromosome[which.max(data$Gene_Count)])
} else if (type == "lowest") {
return(data$Chromosome[which.min(data$Gene_Count)])
} else {
stop("Invalid type argument. Please use 'highest' or 'lowest'.")
}
}
highest_count_chromosome <- get_chromosome(chromosome_data, "highest")
lowest_count_chromosome <- get_chromosome(chromosome_data, "lowest")
cat("Chromosome with the highest count:", highest_count_chromosome, "\n")
cat("Chromosome with the lowest count:", lowest_count_chromosome, "\n")
